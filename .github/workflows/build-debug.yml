name: Build Debug Version

on:
  push:
    branches: [ main, master, develop, feature/*, release/* ]
    tags:
      - 'v*.*.*'  # 添加版本标签触发条件，如v1.1.0
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # 允许手动触发

# 添加权限配置
permissions:
  contents: write  # 允许工作流写入仓库内容(必须有这个权限才能创建Releases)
  pull-requests: write  # 可选，如果需要评论PR
  issues: write  # 可选，如果需要操作Issues

jobs:
  build-android-debug:
    name: Build Android Debug APK
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "检测到package.json版本号: $VERSION"
          
          # 检查version.ts文件是否已经更新
          echo "验证config/version.ts中的版本号是否与package.json同步..."
          TS_VERSION=$(node -e "try { const v = require('./config/version').APP_INFO.VERSION; console.log(v); } catch(e) { console.log('error'); }")
          echo "config/version.ts中版本号: $TS_VERSION"
          
          if [ "$TS_VERSION" != "$VERSION" ] && [ "$TS_VERSION" != "error" ]; then
            echo "警告: config/version.ts中的版本号($TS_VERSION)与package.json中的版本号($VERSION)不一致"
            echo "版本文件不同步，但继续构建过程..."
          fi

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Generate native Android files
        run: npx expo prebuild -p android

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Create build directory
        run: mkdir -p ./build

      - name: Copy APK to build directory
        run: cp android/app/build/outputs/apk/debug/app-debug.apk ./build/NeverMiss-debug.apk

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-app
          path: ./build/NeverMiss-debug.apk
          retention-days: 7

  build-ios-debug:
    name: Build iOS Debug App
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Generate native iOS files
        run: npx expo prebuild -p ios

      - name: Install Pods
        run: |
          cd ios
          pod install

      - name: Build iOS App for Simulator
        run: |
          cd ios
          xcodebuild -workspace NeverMiss.xcworkspace -scheme NeverMiss -configuration Debug -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" CODE_SIGN_ENTITLEMENTS="" COMPILER_INDEX_STORE_ENABLE=NO build
      
      - name: Create build directory
        run: mkdir -p ./build/ios-simulator
      
      - name: Find and copy iOS app
        run: |
          # 查找实际的构建输出目录
          echo "查找iOS构建产物..."
          find ~/Library/Developer/Xcode/DerivedData -name "*.app" -type d | grep NeverMiss
          
          # 尝试几种可能的构建输出路径
          if [ -d "ios/build/Build/Products/Debug-iphonesimulator/NeverMiss.app" ]; then
            echo "找到路径: ios/build/Build/Products/Debug-iphonesimulator/NeverMiss.app"
            cp -r ios/build/Build/Products/Debug-iphonesimulator/NeverMiss.app ./build/ios-simulator/
          elif [ -d "~/Library/Developer/Xcode/DerivedData/NeverMiss-*/Build/Products/Debug-iphonesimulator/NeverMiss.app" ]; then
            DERIVED_APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "NeverMiss.app" -type d | grep -v "SourcePackages" | head -n 1)
            echo "找到路径: $DERIVED_APP_PATH"
            cp -r "$DERIVED_APP_PATH" ./build/ios-simulator/
          else
            echo "警告: 找不到iOS构建产物，跳过复制步骤。"
            mkdir -p ./build/ios-simulator/NeverMiss.app
            echo "This is a placeholder file" > ./build/ios-simulator/NeverMiss.app/placeholder.txt
            # 不返回错误，让构建继续
          fi
      
      - name: Compress iOS simulator app
        run: |
          cd build
          zip -r NeverMiss-debug-simulator.zip ios-simulator

      - name: Upload iOS simulator app artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug-simulator
          path: ./build/NeverMiss-debug-simulator.zip
          retention-days: 7

  create-debug-release:
    name: Create Debug Release
    needs: [build-android-debug]
    runs-on: ubuntu-latest
    # 在推送到main或develop分支、使用标签或手动触发时创建发布
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "检测到package.json版本号: $VERSION"

      - name: Create build directory
        run: mkdir -p ./build
        
      - name: Download Android Debug artifact
        uses: actions/download-artifact@v4
        with:
          name: android-debug-app
          path: ./build
          
      - name: Download iOS simulator artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-debug-simulator
          path: ./build
        continue-on-error: true

      - name: Check iOS simulator file
        id: check_ios_file
        run: |
          if [ -f "./build/NeverMiss-debug-simulator.zip" ]; then
            echo "ios_file_exists=true" >> $GITHUB_OUTPUT
            echo "iOS模拟器文件存在"
          else
            echo "ios_file_exists=false" >> $GITHUB_OUTPUT
            echo "警告: iOS模拟器文件不存在，将只发布Android APK"
          fi

      - name: Set release tag name
        id: set_tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            TAG="${{ github.ref_name }}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "使用版本标签: $TAG"
          else
            # 使用package.json中的版本号
            TAG="v${{ steps.package_version.outputs.version }}-debug-${{ github.sha }}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "使用package.json版本: $TAG"
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            echo "## NeverMiss 版本 ${{ steps.set_tag.outputs.tag }} ($(date +'%Y-%m-%d'))" > ./build/RELEASE_NOTES.md
            echo "" >> ./build/RELEASE_NOTES.md
            echo "### 版本说明" >> ./build/RELEASE_NOTES.md
            echo "" >> ./build/RELEASE_NOTES.md
            echo "这是 NeverMiss 应用的自动构建版本。" >> ./build/RELEASE_NOTES.md
          else
            echo "## NeverMiss 版本 v${{ steps.package_version.outputs.version }} 调试构建 ($(date +'%Y-%m-%d'))" > ./build/RELEASE_NOTES.md
            echo "" >> ./build/RELEASE_NOTES.md
            echo "### 调试版本说明" >> ./build/RELEASE_NOTES.md
            echo "" >> ./build/RELEASE_NOTES.md
            echo "此版本为开发调试版本，基于 package.json 中的版本号 v${{ steps.package_version.outputs.version }}，未使用签名密钥构建，仅用于测试。" >> ./build/RELEASE_NOTES.md
          fi
          echo "" >> ./build/RELEASE_NOTES.md
          echo "- 分支: ${{ github.ref_name }}" >> ./build/RELEASE_NOTES.md
          echo "- 提交: ${{ github.sha }}" >> ./build/RELEASE_NOTES.md
          echo "- 构建时间: $(date +'%Y-%m-%d %H:%M:%S')" >> ./build/RELEASE_NOTES.md
          echo "- package.json 版本: v${{ steps.package_version.outputs.version }}" >> ./build/RELEASE_NOTES.md
          
          # 检查version.ts版本号
          TS_VERSION=$(node -e "try { const v = require('./config/version').APP_INFO.VERSION; console.log(v); } catch(e) { console.log('未知'); }")
          echo "- config/version.ts 版本: v$TS_VERSION" >> ./build/RELEASE_NOTES.md

      - name: Create Debug Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ startsWith(github.ref, 'refs/tags/v') && format('NeverMiss {0}', steps.set_tag.outputs.tag) || format('NeverMiss v{0} 调试构建', steps.package_version.outputs.version) }}
          tag_name: ${{ steps.set_tag.outputs.tag }}
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          body_path: ./build/RELEASE_NOTES.md
          files: |
            ./build/NeverMiss-debug.apk
            ${{ steps.check_ios_file.outputs.ios_file_exists == 'true' && './build/NeverMiss-debug-simulator.zip' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 