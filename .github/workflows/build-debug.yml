name: Build Debug Version

on:
  push:
    branches: [ dev, develop, feature/*, bugfix/* ]  # 修改为dev分支和开发相关分支
  workflow_dispatch:  # 允许手动触发

# 添加权限配置
permissions:
  contents: write  # 允许工作流写入仓库内容(必须有这个权限才能创建Releases)
  pull-requests: write  # 可选，如果需要评论PR
  issues: write  # 可选，如果需要操作Issues

jobs:
  build-android-debug:
    name: Build Android Debug APK (开发调试版)
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "检测到package.json版本号: $VERSION"
          
          # 检查version.ts文件是否已经更新
          echo "验证config/version.ts中的版本号是否与package.json同步..."
          TS_VERSION=$(node -e "try { const v = require('./config/version').APP_INFO.VERSION; console.log(v); } catch(e) { console.log('error'); }")
          echo "config/version.ts中版本号: $TS_VERSION"
          
          if [ "$TS_VERSION" != "$VERSION" ] && [ "$TS_VERSION" != "error" ]; then
            echo "警告: config/version.ts中的版本号($TS_VERSION)与package.json中的版本号($VERSION)不一致"
            echo "版本文件不同步，但继续构建过程..."
          fi

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 添加缓存加速依赖安装
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Generate native Android files
        run: npx expo prebuild -p android --clean

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # 添加Gradle缓存
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew assembleDebug -PreactNativeDevSupport=false -PreactNativeJsEngine=hermes --no-daemon --max-workers=2

      - name: Create build directory
        run: mkdir -p ./build

      - name: Copy APK to build directory
        run: cp android/app/build/outputs/apk/debug/app-debug.apk ./build/NeverMiss-Android-debug.apk

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-app
          path: ./build/NeverMiss-Android-debug.apk
          retention-days: 7

  build-ios-debug:
    name: Build iOS Debug App (开发调试版)
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 添加缓存加速依赖安装
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Generate native iOS files
        run: npx expo prebuild -p ios --clean

      # 添加CocoaPods缓存
      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        run: |
          cd ios
          pod install

      - name: Build iOS App for Simulator
        run: |
          cd ios
          xcodebuild -workspace NeverMiss.xcworkspace -scheme NeverMiss -configuration Debug -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" CODE_SIGN_ENTITLEMENTS="" RCT_NO_LAUNCH_PACKAGER=1 NO_FLIPPER=1 COMPILER_INDEX_STORE_ENABLE=NO -quiet build

      - name: Find and prepare iOS app
        run: |
          DERIVED_APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "NeverMiss.app" -type d | grep -v "SourcePackages" | head -n 1)
          if [ ! -z "$DERIVED_APP_PATH" ]; then
            mkdir -p ./build/ios-simulator
            cp -r "$DERIVED_APP_PATH" ./build/ios-simulator/
            cd build
            zip -r -y NeverMiss-iOS-Simulator-debug.zip ios-simulator
          else
            echo "警告: 找不到iOS构建产物"
            mkdir -p ./build
            echo "Placeholder" > ./build/NeverMiss-iOS-Simulator-debug.zip
          fi

      - name: Upload iOS simulator app artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug-simulator
          path: ./build/NeverMiss-iOS-Simulator-debug.zip
          retention-days: 7

      - name: Check iOS simulator file
        id: check_ios_file
        run: |
          if [ -f "./build/NeverMiss-iOS-Simulator-debug.zip" ] && [ $(stat -c%s "./build/NeverMiss-iOS-Simulator-debug.zip") -gt 1000 ]; then
            echo "ios_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "ios_file_exists=false" >> $GITHUB_OUTPUT
          fi

  create-debug-release:
    name: Create Debug Release
    needs: [build-android-debug, build-ios-debug]
    runs-on: ubuntu-latest
    # 修改条件：在推送到dev或develop分支或手动触发时创建发布
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/bugfix/')
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "检测到package.json版本号: $VERSION"

      - name: Download artifacts
        run: |
          mkdir -p ./build
      
      - name: Download Android Debug artifact
        uses: actions/download-artifact@v4
        with:
          name: android-debug-app
          path: ./build
          
      - name: Download iOS simulator artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-debug-simulator
          path: ./build
        continue-on-error: true

      - name: Check iOS simulator file
        id: check_ios_file
        run: |
          if [ -f "./build/NeverMiss-iOS-Simulator-debug.zip" ] && [ $(stat -c%s "./build/NeverMiss-iOS-Simulator-debug.zip") -gt 1000 ]; then
            echo "ios_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "ios_file_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set release tag name
        id: set_tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="v${{ steps.package_version.outputs.version }}-debug-${{ github.sha }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          TITLE="NeverMiss 开发调试版本 v${{ steps.package_version.outputs.version }}"
          DESC="此版本为开发调试版本，基于 package.json 中的版本号 v${{ steps.package_version.outputs.version }}，需要PC开发环境支持运行。"
          
          # 获取当前日期
          BUILD_DATE=$(date +'%Y-%m-%d')
          
          cat > ./build/RELEASE_NOTES.md << EOF
          ## ${TITLE}
          
          ### 版本说明
          
          ${DESC}
          
          ### 下载说明
          
          - **Android 调试版本**: NeverMiss-Android-debug.apk
            - 适用于Android 7.0及以上设备
            - 需连接开发环境运行
            - 开发调试版本，需要PC运行相关服务使用
          
          - **iOS模拟器调试版本**: NeverMiss-iOS-Simulator-debug.zip
            - 仅适用于macOS上的iOS模拟器
            - 需要Xcode和iOS模拟器环境
            - 需要PC运行相关服务使用
            - 解压后，拖拽.app文件到模拟器中安装
          
          ### 构建信息
          
          - 分支: ${{ github.ref_name }}
          - 提交: ${{ github.sha }}
          - 构建时间: $(date +'%Y-%m-%d %H:%M:%S')
          - 版本: v${{ steps.package_version.outputs.version }}
          - 构建日期: ${BUILD_DATE}
          - 环境要求: 需要PC运行开发服务器
          EOF

      - name: Create Debug Release
        uses: softprops/action-gh-release@v1
        with:
          name: NeverMiss v${{ steps.package_version.outputs.version }} 开发调试版 [${{ github.ref_name }}]
          tag_name: ${{ steps.set_tag.outputs.tag }}
          draft: false
          prerelease: true
          body_path: ./build/RELEASE_NOTES.md
          files: |
            ./build/NeverMiss-Android-debug.apk
            ${{ steps.check_ios_file.outputs.ios_file_exists == 'true' && './build/NeverMiss-iOS-Simulator-debug.zip' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 