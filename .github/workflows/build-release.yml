name: Build Release (Store Version)

on:
  workflow_dispatch:  # 仅允许手动触发，从main/master分支构建商店版本

# 添加权限配置
permissions:
  contents: write  # 允许工作流写入仓库内容(必须有这个权限才能创建Releases)
  pull-requests: write  # 可选，如果需要评论PR
  issues: write  # 可选，如果需要操作Issues

jobs:
  build-android:
    name: Build Android App (Store Version)
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "检测到package.json版本号: $VERSION"
          
          # 检查version.ts文件是否已经更新
          echo "验证config/version.ts中的版本号是否与package.json同步..."
          TS_VERSION=$(node -e "try { const v = require('./config/version').APP_INFO.VERSION; console.log(v); } catch(e) { console.log('error'); }")
          echo "config/version.ts中版本号: $TS_VERSION"
          
          if [ "$TS_VERSION" != "$VERSION" ] && [ "$TS_VERSION" != "error" ]; then
            echo "警告: config/version.ts中的版本号($TS_VERSION)与package.json中的版本号($VERSION)不一致"
            echo "请确保两处版本号一致，以避免app内显示的版本号与实际发布版本不符。"
            echo "继续构建过程..."
          fi

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 添加缓存加速依赖安装
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Generate native Android files
        run: npx expo prebuild -p android --clean

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Configure Kotlin version
        run: |
          echo "kotlin.version=1.7.20" >> android/gradle.properties
          echo "suppressKotlinVersionCompatibilityCheck=true" >> android/gradle.properties

      # 添加Gradle缓存
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup signing config
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore/nevermiss.keystore
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> android/gradle.properties
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> android/gradle.properties
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> android/gradle.properties
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Update build.gradle
        run: |
          cat << EOF >> android/app/build.gradle
          
          android {
              signingConfigs {
                  release {
                      storeFile file('keystore/nevermiss.keystore')
                      storePassword System.getProperty('KEYSTORE_PASSWORD', KEYSTORE_PASSWORD)
                      keyAlias System.getProperty('KEY_ALIAS', KEY_ALIAS)
                      keyPassword System.getProperty('KEY_PASSWORD', KEY_PASSWORD)
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                  }
              }
          }
          EOF

      - name: Build Release APK and AAB
        run: |
          cd android
          ./gradlew bundleRelease assembleRelease \
            -PreactNativeDevSupport=false \
            -PreactNativeJsEngine=jsc \
            -PnewArchEnabled=true \
            --no-daemon \
            --max-workers=2
          
      - name: Copy APK and AAB to build directory
        run: |
          mkdir -p ./build
          cp android/app/build/outputs/apk/release/app-release-newarch.apk ./build/NeverMiss-Android-Store.apk
          cp android/app/build/outputs/bundle/release/app-release.aab ./build/NeverMiss-Android-Store.aab

      - name: Upload APK and AAB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-store-artifacts
          path: |
            ./build/NeverMiss-Android-Store.apk
            ./build/NeverMiss-Android-Store.aab
          retention-days: 7

  build-ios:
    name: Build iOS App (Store Version)
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 添加缓存加速依赖安装
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Generate native iOS files
        run: npx expo prebuild -p ios --clean

      # 添加CocoaPods缓存
      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        run: |
          cd ios
          pod install

      - name: Install certificate and profile
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Download provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build iOS App
        run: |
          cd ios
          xcodebuild -workspace NeverMiss.xcworkspace -scheme NeverMiss archive -archivePath ./build/NeverMiss.xcarchive -allowProvisioningUpdates CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY="${{ secrets.IOS_CERTIFICATE_NAME }}" PROVISIONING_PROFILE="profile.mobileprovision" RCT_NO_LAUNCH_PACKAGER=1 NO_FLIPPER=1 COMPILER_INDEX_STORE_ENABLE=NO -quiet

      - name: Create exportOptions.plist
        run: |
          cat << EOF > ios/exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF

      - name: Export IPA
        run: |
          cd ios
          mkdir -p ../build
          xcodebuild -exportArchive -archivePath ./build/NeverMiss.xcarchive -exportOptionsPlist exportOptions.plist -exportPath ../build -quiet

      - name: Rename and upload IPA artifact
        run: |
          if [ -f "./build/NeverMiss.ipa" ]; then
            mv ./build/NeverMiss.ipa ./build/NeverMiss-iOS-Store.ipa
          else
            echo "警告: 找不到IPA文件!"
            find ./build -type f -name "*.ipa"
          fi
          
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-store-artifacts
          path: ./build/NeverMiss-iOS-Store.ipa
          retention-days: 7

  create-release:
    name: Create Store Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "检测到package.json版本号: $VERSION"
          
          # 检查version.ts版本号
          TS_VERSION=$(node -e "try { const v = require('./config/version').APP_INFO.VERSION; console.log(v); } catch(e) { console.log('未知'); }")
          echo "config/version.ts版本号: $TS_VERSION"

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-store-artifacts
          path: ./build
          
      - name: Download iOS artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-store-artifacts
          path: ./build
        continue-on-error: true

      - name: Check iOS file exists
        id: check_ios_file
        run: |
          if [ -f "./build/NeverMiss-iOS-Store.ipa" ] && [ $(stat -c%s "./build/NeverMiss-iOS-Store.ipa") -gt 1000 ]; then
            echo "ios_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "ios_file_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate version number
        id: version
        run: |
          VERSION="v${{ steps.package_version.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          # 获取当前日期
          BUILD_DATE=$(date +'%Y-%m-%d')
          
          cat > ./build/RELEASE_NOTES.md << EOF
          ## NeverMiss 商店正式版本 ${{ steps.version.outputs.version }}
          
          ### 发布说明
          
          这是 NeverMiss 应用的正式商店发布版本。
          
          ### 下载说明
          
          - **Android APK版本**: NeverMiss-Android-Store.apk
            - 已签名可直接安装的商店版本
            - 适用于Android 7.0及以上设备
          
          - **Android AAB版本**: NeverMiss-Android-Store.aab
            - 适用于Google Play商店上传的二进制包
            - 不可直接安装，仅用于发布到应用商店
          
          - **iOS版本**: NeverMiss-iOS-Store.ipa
            - 用于上传至App Store的签名版本
            - 需要通过App Store Connect上传
            - 或使用AltStore等第三方工具安装测试
          
          ### 构建信息
          
          - 版本号: ${{ steps.package_version.outputs.version }}
          - 提交: ${{ github.sha }}
          - 构建时间: $(date +'%Y-%m-%d %H:%M:%S')
          - 构建日期: ${BUILD_DATE}
          - 分支: main/master
          EOF

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: store-${{ steps.version.outputs.version }}
          name: NeverMiss 商店版本 ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          body_path: ./build/RELEASE_NOTES.md
          files: |
            ./build/NeverMiss-Android-Store.apk
            ./build/NeverMiss-Android-Store.aab
            ${{ steps.check_ios_file.outputs.ios_file_exists == 'true' && './build/NeverMiss-iOS-Store.ipa' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 